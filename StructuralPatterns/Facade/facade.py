from typing import List, Dict


class MenuService:
    def get_menu(self) -> Dict[str, float]:
        return {
            "–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": 150.0,
            "–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ": 180.0,
            "–ë—É—Ä–≥–µ—Ä": 120.0,
            "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä": 90.0,
            "–ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ": 50.0,
            "–ö–æ–∫–∞-–∫–æ–ª–∞": 25.0
        }

    def is_available(self, item: str) -> bool:
        return item not in ["–ë—É—Ä–≥–µ—Ä"]  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç—Ä–∞–≤–∏


class OrderValidator:
    def validate(self, items: List[str], menu: Dict[str, float]) -> bool:
        for item in items:
            if item not in menu:
                print(f"'{item}' –≤—ñ–¥—Å—É—Ç–Ω—è –≤ –º–µ–Ω—é")
                return False
            if not MenuService().is_available(item):
                print(f"'{item}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False
        return True

    def get_total(self, items: List[str], menu: Dict[str, float]) -> float:
        return sum(menu[item] for item in items)


class PaymentProcessor:
    def pay(self, amount: float, method: str) -> bool:
        print(f"–û–ø–ª–∞—Ç–∞ {amount} –≥—Ä–Ω ({method})...")
        return amount > 0 and method in ["–∫–∞—Ä—Ç–∫–∞", "–≥–æ—Ç—ñ–≤–∫–∞", "–æ–Ω–ª–∞–π–Ω"]


class KitchenService:
    def cook(self, items: List[str]) -> None:
        print("üë®‚Äçüç≥ –ì–æ—Ç—É—î–º–æ:", ", ".join(items))


class DeliveryService:
    def deliver(self, address: str, items: List[str]) -> None:
        print(f"–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {address}")


class NotificationSystem:
    def notify(self, phone: str, message: str) -> None:
        print(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è {phone}: {message}")


class FoodOrderFacade:
    def __init__(self):
        self.menu = MenuService()
        self.validator = OrderValidator()
        self.payment = PaymentProcessor()
        self.kitchen = KitchenService()
        self.delivery = DeliveryService()
        self.notifier = NotificationSystem()

    def place_order(self, items: List[str], address: str, phone: str, payment_method: str) -> bool:
        print("\nüçï –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...")

        menu = self.menu.get_menu()
        if not self.validator.validate(items, menu):
            return False

        total = self.validator.get_total(items, menu)
        print(f"üí∞ –°—É–º–∞: {total} –≥—Ä–Ω")

        if not self.payment.pay(total, payment_method):
            return False

        self.kitchen.cook(items)
        self.delivery.deliver(address, items)

        order_info = f"{', '.join(items)} - {total} –≥—Ä–Ω"
        self.notifier.notify(phone, order_info)

        print("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
        return True


if __name__ == "__main__":
    service = FoodOrderFacade()

    service.place_order(
        ["–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ", "–ö–æ–∫–∞-–∫–æ–ª–∞"],
        "–≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 123",
        "+380501234567",
        "–∫–∞—Ä—Ç–∫–∞"
    )

    print("\n" + "=" * 40 + "\n")

    service.place_order(
        ["–ë—É—Ä–≥–µ—Ä", "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä"],
        "–≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 123",
        "+380501234567",
        "–≥–æ—Ç—ñ–≤–∫–∞"
    )